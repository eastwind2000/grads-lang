{
	"information_for_contributors": [" OpenGrADS" ],
	"version": "OpenGrADS 2.0",
	"name": "grads",
	"scopeName": "source.gs",
	"comment": "GrADS 2.0",
	"patterns": [
		{
			"begin": "\\b((local\\b)\\s+)?(function)\\s*(\\s+[a-zA-Z_][a-zA-Z0-9_]*(\\.[a-zA-Z_][a-zA-Z0-9_]*)*(:[a-zA-Z_][a-zA-Z0-9_]*)?\\s*)?(\\()",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.local.lua"
				},
				"3": {
					"name": "keyword.control.lua"
				},
				"4": {
					"name": "entity.name.function.lua"
				},
				"5": {
					"name": "punctuation.definition.parameters.begin.lua"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.lua"
				}
			},
			"name": "meta.function.lua",
			"patterns": [
				{
					"match": "[a-zA-Z_][a-zA-Z0-9_]*",
					"name": "variable.parameter.function.lua"
				}
			]
		},
		{
			"match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(?![pPeE.0-9])",
			"name": "constant.numeric.integer.hexadecimal.lua"
		},
		{
			"match": "(?<![\\w\\d.])0[xX][0-9A-Fa-f]+(\\.[0-9A-Fa-f]+)?([eE]-?\\d*)?([pP][-+]\\d+)?",
			"name": "constant.numeric.float.hexadecimal.lua"
		},
		{
			"match": "(?<![\\w\\d.])\\d+(?![pPeE.0-9])",
			"name": "constant.numeric.integer.lua"
		},
		{
			"match": "(?<![\\w\\d.])\\d+(\\.\\d+)?([eE]-?\\d*)?",
			"name": "constant.numeric.float.lua"
		},
		{
			"begin": "",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.lua"
				}
			},
			"end": "",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.lua"
				}
			},
			"name": "string.quoted.single.lua",
			"patterns": [
				{
					"include": "#escaped_char"
				}

			]
		},
		
		{
			"begin": "(?<=\\.cdef)\\s*(\\[(=*)\\[)",
			"beginCaptures": {
				"0": {
					"name": "string.quoted.other.multiline.lua"
				},
				"1": {
					"name": "punctuation.definition.string.begin.lua"
				}
			},
			"contentName": "meta.embedded.lua",
			"end": "(\\]\\2\\])",
			"endCaptures": {
				"0": {
					"name": "string.quoted.other.multiline.lua"
				},
				"1": {
					"name": "punctuation.definition.string.end.lua"
				}
			},
			"patterns": [
				{
					"include": "source.c"
				}
			]
		},
		{
			"begin": "(^[ \\t]+)?(?=\\*)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.lua"
				}
			},
			"end": "(?!\\G)((?!^)[ \\t]+\\n)?",
			"endCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.trailing.lua"
				}
			},
			"patterns": [
				{
					"begin": "\\*",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.lua"
						}
					},
					"end": "\\n",
					"name": "comment.line.double-dash.lua"
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.goto.lua"
				},
				"2": {
					"name": "constant.other.placeholder.lua"
				}
			},
			"match": "\\b(goto)\\s+([a-zA-Z_][a-zA-Z0-9_]*)"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.label.begin.lua"
				},
				"2": {
					"name": "punctuation.definition.label.end.lua"
				}
			},
			"match": "(::)[a-zA-Z_][a-zA-Z0-9_]*(::)",
			"name": "constant.other.placeholder.lua"
		},
		{
			"match": "\\b(tloop|tlsupp|cmark|mark||barbase|parea|clab|cbarn|draw|xflip|yflip|xlabs|ylabs|xlevs|ylevs|xyrev|xlint|ylint|xlab|ylab|xlabs|ylabs|vrange|vrange2|const|string|rec|recf|mproj|mres|oares|maskout|oabin||clopts|cstyle|line|cthick|ccolor|rgb|barb|stream|level|cint|shaded|fgrid|shp|shpopts|dignum|digsiz|strlen|wrdpos|gsfallow|skip|gsfpath|math_sin|math_cos|math_tan|math_asin|math_acos|math_atan|math_atan2|math_sinh|math_cosh|math_tanh|math_asinh|math_acosh|math_atanh|math_format|math_nint|math_int|math_log|math_log10|math_pow|math_sqrt|math_abs|math_exp|math_fmod|math_mod|math_strlen|valnum|say|gxout|map|mpdset|grid|grads|colormap|gxprint|white|rbcols|clevs|grid|run|q|result|subwrd|sublin|substr|define|t|z|y|x|ylopts|xlopts|reinit|lon|lat|open|set|xdef|ydef|zdef|tdef|dset|dtype|linear|edef|title|template|options|big_endian|little_endian|stnmap|undef|station|vars|endvars|sublin|subwrd|sin|cos|tan|break|do|else|for|if|elseif|return|then|end|function)(\\s++)\\b",
			"name": "keyword.control.lua"
		},
		{
			"match": "\\b(|math_acos|math_atan|math_atan2|math_sinh|math_cosh|math_tanh|math_asinh|math_acosh|math_atanh|math_format|math_nint|math_int|math_log|math_log10|math_pow|math_sqrt|math_abs|math_exp|math_fmod|math_mod|math_strlen|valnum|say|gxout|result|subwrd|sublin|substr|sin|cos|tan|break|do|else|for|if|elseif|return|then|while|endwhile|end|function)\\b",
			"name": "keyword.gs.lua"
		},
		{
			"match": "\\b(DSET|XDEF|YDEF|ZDEF|TDEF|LINEAR|TITLE|TEMPLATE|OPTIONS|LINEAR|VARS|ENDVARS|EDEF|BIG_ENDIAN|LITTLE_ENDIAN|STNMAP|UNDEF|STATION|VARS|ENDVARS|)\\b",
			"name": "bigcase_keyword.control.lua"
		},
		
		{
			"match": "(?<![^.]\\.|:)\\b(false|nil|true|_G|_VERSION|math\\.(pi|huge))\\b|(?<![.])\\.{3}(?!\\.)",
			"name": "constant.language.lua"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(self)\\b",
			"name": "variable.language.self.lua"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(grads|ctl|)\\b(?=\\s*(?:[({\"']|\\[\\[))",
			"name": "support.function.lua"
		},
		{
			"match": "(?<![^.]\\.|:)\\b(coroutine\\.(create|resume|running|status|wrap|yield)|string\\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table\\.(concat|insert|maxn|remove|sort)|math\\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?)|io\\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\\.(netcdf|time|colormap)|package\\.(cpath|loaded|loadlib|path|preload|seeall)|debug\\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|traceback))\\b(?=\\s*(?:[({\"']|\\[\\[))",
			"name": "support.function.library.lua"
		},
		{
			"match": "\\b(and|or|not)\\b",
			"name": "keyword.operator.lua"
		},
		{
			"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({\"']|\\[\\[))",
			"name": "support.function.any-method.lua"
		},
		{
			"match": "(?<=[^.]\\.|:)\\b([a-zA-Z_][a-zA-Z0-9_]*)",
			"name": "variable.other.lua"
		},
		{
			"match": "\\*\\+|-|%|#|\\/|\\^|==?|~=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)",
			"name": "keyword.operator.lua"
		}
	],
	"repository": {
		"escaped_char": {
			"patterns": [
				{
					"match": "\\\\[abfnrtvz\\\\\"'\\n]",
					"name": "constant.character.escape.lua"
				},
				{
					"match": "\\\\\\d{1,3}",
					"name": "constant.character.escape.byte.lua"
				},
				{
					"match": "\\\\x[0-9A-Fa-f][0-9A-Fa-f]",
					"name": "constant.character.escape.byte.lua"
				},
				{
					"match": "\\\\u\\{[0-9A-Fa-f]+\\}",
					"name": "constant.character.escape.unicode.lua"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.character.escape.lua"
				}
			]
		}
	}
}